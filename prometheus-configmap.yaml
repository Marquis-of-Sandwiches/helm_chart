apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  name: prometheus-setup
  namespace: monitoring
data:

 init-prometheus.sh: |
   #!/bin/sh
   # This script uses the packaged prometheus to get all the dependencies.
   # Then runs a much later version from /usr/local/bin
   DATA_PATH="/data"
   SSL_PATH="/etc/self-signed"
   KEY_SECRET="supersecret"
   PROM_CONFIG="/etc/config/prometheus.yaml"
   PROM_CPU="amd64"
   ##This is for tls auth
   KEY_INCANTATION='req -newkey rsa:2048 -nodes -subj /C=US/ST=california/L="santa monica"/O="Edify Labs, Inc."/OU=DevOps/CN='$(hostname | sed 's/-//')' -keyout '$DATA_PATH'/local-server-key.pem -out '$DATA_PATH'/server-req.pem'
    
   eval "openssl $KEY_INCANTATION"

   openssl rsa -in $DATA_PATH/local-server-key.pem -out $DATA_PATH/host-key.pem
     
     echo "extendedKeyUsage = serverAuth, clientAuth" > /tmp/extfile.cnf
     
     echo "[req_distinguished_name]" >  /tmp/extfile.cnf
     echo "CN ="$(hostname) >> /tmp/extfile.cnf
     echo "[v3_req]" >> /tmp/extfile.cnf
     echo "extendedKeyUsage = serverAuth, clientAuth" >> /tmp/extfile.cnf
     echo "subjectAltName = @alt_names" >> /tmp/extfile.cnf
     echo "[alt_names]"  >> /tmp/extfile.cnf
     echo "IP.1 = "$(hostname -i) >> /tmp/extfile.cnf
     echo "IP.2 = 127.0.0.1" >> /tmp/extfile.cnf
     echo "IP.3 = 10.100.0.102"  >> /tmp/extfile.cnf
     echo "IP.4 = 10.100.0.103"  >> /tmp/extfile.cnf
     echo "IP.5 = 10.100.0.104"  >> /tmp/extfile.cnf
     echo "IP.6 = 10.100.0.105"  >> /tmp/extfile.cnf
     echo "IP.7 = 10.100.0.106"  >> /tmp/extfile.cnf
     echo "IP.8 = 10.100.0.107"  >> /tmp/extfile.cnf
     echo "IP.9 = 10.100.0.108"  >> /tmp/extfile.cnf
     echo "DNS.1 = "$(hostname -d)  >> /tmp/extfile.cnf
     echo "DNS.2 = localhost"  >> /tmp/extfile.cnf
     echo "DNS.3 = prometheus0.monitoring" >> /tmp/extfile.cnf
     echo "DNS.4 = prometheus1.monitoring"  >> /tmp/extfile.cnf
     echo "DNS.5 = prometheus-0" >> /tmp/extfile.cnf
     echo "DNS.6 = prometheus-1" >> /tmp/extfile.cnf
     echo "DNS.7 = grafana0"  >> /tmp/extfile.cnf
     echo "DNS.8 = grafana-0"  >> /tmp/extfile.cnf
     echo "DNS.9 = grafana0.monitoring" >> /tmp/extfile.cnf
     echo "DNS.10 = grafana1.monitoring" >> /tmp/extfile.cnf
     echo "DNS.11 = kube-state-metrics0.kube-system"  >> /tmp/extfile.cnf
     echo "DNS.12 = alert-manager-lb" >> /tmp/extfile.cnf

     echo "$KEY_SECRET" | openssl x509 -req -in $DATA_PATH/server-req.pem -days 3600 -CA $SSL_PATH/self-signed-CA.pem -CAkey $SSL_PATH/self-signed-CA-key.pem -passin stdin -CAcreateserial -CAserial $DATA_PATH/self-signed-CA.srl -out $DATA_PATH/host-cert.pem -extfile /tmp/extfile.cnf
    #https://dl.k8s.io/v1.28.3/kubernetes-client-linux-amd64.tar.gz
    for r in \
    "chown runner $DATA_PATH/*.pem && chgrp runner $DATA_PATH/*.pem && chmod 660 $DATA_PATH/*.pem" \
    " /bin/cp -f ${SSL_PATH}/self-signed-CA.pem  ${DATA_PATH}/" \
    "cat ${DATA_PATH}/host-cert.pem ${DATA_PATH}/self-signed-CA.pem > ${DATA_PATH}/combined-certs.pem " \
    "wget --directory-prefix=/tmp --no-clobber https://storage.googleapis.com/kubernetes-release/release/stable.txt" \
    "wget --directory-prefix=/tmp --no-clobber https://dl.k8s.io/$(cat /tmp/stable.txt)/kubernetes-client-linux-"$PROM_CPU".tar.gz " \
    "tar -xvf /tmp/kubernetes-client-linux-"$PROM_CPU".tar.gz" \
    "mv /kubernetes/client/bin/* /usr/local/bin" \
    "chmod +x /usr/local/bin/kube*" ; do 
    echo $r && eval "${r}"
    done

    LOOP_LIMIT=5
    
    LOOP=0

    while true ; do
    
      INCANTATION='/usr/local/bin/prometheus  --web.listen-address="0.0.0.0:9090" --config.file="'$PROM_CONFIG'" --alertmanager.notification-queue-capacity=100 --storage.tsdb.retention.time="4w" --storage.tsdb.path="'$DATA_PATH'" --enable-feature=memory-snapshot-on-shutdown --web.enable-admin-api --web.enable-lifecycle "'

      echo $INCANTATION
      
      su -s /bin/sh -c "$INCANTATION" runner

      echo "Prometheus died.  Should not be here.  Loop: "$LOOP
      
      #cmd="curl -v -H \'Content-Type: application/json\' --user \"mysql_scraper:xn7QPmltBTYCAL9W\" -d '[{\"labels\":{\"alertname\":\"prometheus has died "$LOOP" of "$LOOP_LIMIT" times.\",\"severity\":\"error\"}}]' alert-manager-lb0:9093/api/v1/alerts"
      
      #echo "${CMD}" && eval "${cmd}"
   
      if [ $LOOP -ge $LOOP_LIMIT ] ; then
     
        echo "Hit loop limit.  Exiting as failed"     
        
        #cmd="curl -v -H 'Content-Type: application/json' --user \"mysql_scraper:xn7QPmltBTYCAL9W\" -d '[{\"labels\":{\"alertname\":\"prometheus has died for the last time \",\"severity\":\"critical\" }}]' alert-manager-lb0:9093/api/v1/alerts"
        
        #echo "${CMD}" && eval "${cmd}"
        
        break
      fi
     
      LOOP=$(( $LOOP + 1 ))
    
     sleep 30
     
    done
    
 liveness.sh: |
   #kubernetes own method of liveness kills the pod randomly
   #plus, custom pass/fail !
   PROMETHEUS_PORT=9090
   LOOP_COUNTER=0
   LOOP_LIMIT=5
   YES_OR_NO=0
   #for some reason my other concise while loop stopped working.
   while  true  ; do
    if  [ "$(which netstat | grep [a-z/])" = '' ] ; then
      echo netstat not present
      echo going to assume it will be eventually
      exit 0
    elif [ $(ps aux | grep -c 'apk\|apt\|dpkg') -ge 2 ] ; then
       echo still adding packages
       exit 0
    elif [ $( netstat -l | grep -c "$PROMETHEUS_PORT" ) -ge 1 ] && [ ! "$(which netstat | grep [a-z/])" = '' ] ; then
        YES_OR_NO=$(( $YES_OR_NO + 1 ))
        break
    elif [ $LOOP_COUNTER -eq $LOOP_LIMIT ] ; then
       break
    else
       LOOP_COUNTER=$(( $LOOP_COUNTER + 1 ))
    fi
   done

   if [ $YES_OR_NO -eq 1 ] ; then
    echo yes
    exit 0
   else
    echo no
    exit 1
   fi
 prometheus.yaml: |
   global:
     scrape_interval:     15s # By default, scrape targets every 15 seconds.

   # Attach these labels to any time series or alerts when communicating with
   # external systems (federation, remote storage, Alertmanager).
     external_labels:
       monitor: 'codelab-monitor'

   # A scrape configuration containing exactly one endpoint to scrape:
   # Here it's Prometheus itself.
   scrape_configs:
    # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
   - job_name: 'prometheus'
     # Override the global default and scrape targets from this job every 5 seconds.
     scrape_interval: 15s
     static_configs:
       - targets: 
         - 'localhost:9090'
   - job_name: 'kube-state-metrics'
     static_configs:
       - targets:  
         - 'kube-state-metrics210.default.svc.cluster.local:8080'
 
 tls-exp-config: |
    tls_server_config:
      cert_file: /var/lib/exporter/host-cert.pem
      key_file:  /var/lib/exporter/host-key.pem
      client_auth_type: RequestClientCert
      client_ca_file:  /var/lib/exporter/self-signed-CA.pem
    http_server_config:
        http2: true
    basic_auth_users:
      mysql_scraper: $hashedpassword1

 tls-prom-config: |
    tls_server_config:
      cert_file: /data/host-cert.pem
      key_file:  /data/host-key.pem
      client_auth_type: RequestClientCert
      client_ca_file:  /data/self-signed-CA.pem
    http_server_config:
        http2: false
    basic_auth_users:
      mysql_scraper: $hashedpassword1
      edify_admin: $hashedpassword2
 
 kubeconfig: |
   clusters:
      - cluster:
          certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          server: https://kubernetes.default.svc.cluster.local:443
        name: default
   contexts:
      - context:
           cluster: default
           user: prometheus
        name: prometheus
   current-context: prometheus
   users:
      - name: prometheus
        user:
          tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token 
             
